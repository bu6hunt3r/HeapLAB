#+PROPERTY: header-args :tangle exploit.py :tangle-mode (identity #o744)

#+TITLE: One-Byte Overwrite Challenge

* Table of Contents                                                 :TOC:
- [[#preamble][Preamble]]
- [[#the-exploit][The Exploit]]

* Preamble

#+BEGIN_SRC python 
  #!/usr/bin/python3
  from pwn import *

  elf = context.binary = ELF("one_byte")
  libc = ELF(elf.runpath + b"/libc.so.6") # elf.libc broke again

  gs = '''
  continue
  '''
  def start():
      if args.GDB:
          return gdb.debug(elf.path, gdbscript=gs)
      else:
          return process(elf.path)

  # Index of allocated chunks.
  index = 0

  # Select the "malloc" option.
  # Returns chunk index.
  def malloc():
      global index
      io.sendthen(b"> ", b"1")
      index += 1
      return index - 1

  # Select the "free" option; send index.
  def free(index):
      io.send(b"2")
      io.sendafter(b"index: ", f"{index}".encode())
      io.recvuntil(b"> ")

  # Select the "edit" option; send index & data.
  def edit(index, data):
      io.send(b"3")
      io.sendafter(b"index: ", f"{index}".encode())
      io.sendafter(b"data: ", data)
      io.recvuntil(b"> ")

  # Select the "read" option; read 0x58 bytes.
  def read(index):
      io.send(b"4")
      io.sendafter(b"index: ", f"{index}".encode())
      r = io.recv(0x58)
      io.recvuntil(b"> ")
      return r

  io = start()
  io.recvuntil(b"> ")
  io.timeout = 0.1
#+END_SRC
* The Exploit
